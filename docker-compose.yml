services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: appdb
    healthcheck:
      test:
        - CMD-SHELL
        - PGPASSWORD=$$POSTGRES_PASSWORD pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h 127.0.0.1
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - appnet

  redis:
    image: redis:7
    ports:
      - "6380:6379"
    networks:
      - appnet
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  backend1: &backend1
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    ports:
      - "8002:8000"
    environment:
      DATABASE_URL: postgresql://user:password@postgres:5432/appdb
      REDIS_URL: redis://redis:6379/0
    networks:
      - appnet
    healthcheck:
      test: ["CMD-SHELL","curl â€‘f http://localhost:8000/health || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 5
    restart: unless-stopped

  backend2:
    <<: *backend1
    ports:
      - "8003:8000"
    restart: on-failure

  redis_exporter:
    image: oliver006/redis_exporter:v1.45.0
    command: ["redis_exporter", "--redis.addr", "redis://redis:6379"]
    ports:
      - "9122:9121"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - appnet

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
    ports:
      - "5176:5173"
    command: npm run dev -- --host 0.0.0.0
    environment:
      - VITE_API_URL=http://localhost:8002
    depends_on:
      - backend1
      - backend2
    user: node

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8082:80"
    depends_on:
      - backend1
      - backend2
    restart: unless-stopped
    networks:
      - appnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/stub_status"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx_exporter:
    image: nginx/nginx-prometheus-exporter:0.10.0
    command: -nginx.scrape-uri http://nginx/stub_status
    depends_on:
      nginx:
        condition: service_healthy
    ports:
      - "9114:9113"
    healthcheck:
      disable: true
    networks:
      - appnet

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9092:9090"
    depends_on:
      - nginx_exporter
    healthcheck:
      disable: true

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    healthcheck:
      disable: true

  k6:
    image: grafana/k6:latest
    working_dir: /tests
    volumes:
      - ./backend/tests/load:/tests
    entrypoint: ["k6","run","--vus","100","--duration","5m","/tests/loadtest.js"]
    environment:
      BASE_URL: http://api:8000
    depends_on:
      backend1:
        condition: service_healthy
    networks:
      - appnet
    profiles: ["load"]

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL:  admin@localhost.localdomain
      PGADMIN_DEFAULT_PASSWORD: secret
    ports:
      - "5051:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./backend/pgadmin-config/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - postgres
    networks:
      - appnet

networks:
  appnet:

volumes:
  postgres_data:
  pgadmin_data: